---
layout: single
title:  "2023 C++ 학습하기"
categories: coding
toc: true
author_profile: false
---


<head>
  <style>
    table.dataframe {
      white-space: normal;
      width: 100%;
      height: 240px;
      display: block;
      overflow: auto;
      font-family: Arial, sans-serif;
      font-size: 0.9rem;
      line-height: 20px;
      text-align: center;
      border: 0px !important;
    }

    table.dataframe th {
      text-align: center;
      font-weight: bold;
      padding: 8px;
    }

    table.dataframe td {
      text-align: center;
      padding: 8px;
    }

    table.dataframe tr:hover {
      background: #b8d1f3; 
    }

    .output_prompt {
      overflow: auto;
      font-size: 0.9rem;
      line-height: 1.45;
      border-radius: 0.3rem;
      -webkit-overflow-scrolling: touch;
      padding: 0.8rem;
      margin-top: 0;
      margin-bottom: 15px;
      font: 1rem Consolas, "Liberation Mono", Menlo, Courier, monospace;
      color: $code-text-color;
      border: solid 1px $border-color;
      border-radius: 0.3rem;
      word-break: normal;
      white-space: pre;
    }

  .dataframe tbody tr th:only-of-type {
      vertical-align: middle;
  }

  .dataframe tbody tr th {
      vertical-align: top;
  }

  .dataframe thead th {
      text-align: center !important;
      padding: 8px;
  }

  .page__content p {
      margin: 0 0 0px !important;
  }

  .page__content p > strong {
    font-size: 0.8rem !important;
  }

  </style>
</head>


### 동적 구조체 추가 설명

  * 04.8 포인터, 배열, 포인터연산 단원

  구조체 또한 컴파일 시간보다 실행 시간에 배열을 생성하는 것이 훨씬 유리하다.

  실행 시간에 프로그램이 요구하는 만큼의 구조체 공간을 정확히 대입받아야 한다.

  new 연산자를 사용하여 동적 구조체를 생성할 수 있다.

  동적이라는 말은 컴파일 시간이 아닌 실행 시간에 메모리를 대입받는다는 것을 뜻한다.

  ```cpp
  #include <iostream>
  struct inflatable    // 구조체 정의
  {
    char name[20];
    float volume;
    double price;
  };
  int main()
  {
    using namespace std;
    inflatable * ps = new inflatable;    // 구조체를 위한 메모리 대입
    cout << "모형풍선의 이름을 입력하십시오: ";
    cin.get(ps->name, 20)    // 멤버에 접근하는 방법 1
    cout << "부피를 세제곱 피트 단위로 입력하십시오: ";
    cin >> (*ps).volume;    // 멤버에 접근하는 방법 2
    cout << "가격을 달러 단위로 입력하십시오: $";
    cin >> ps->price;
    cout << "이름: " << (*ps).name << endl;    // 방법 2
    cout << "부피: " << ps->volume << " cubic feet\n";    // 방법 1
    cout << "가격: $" << ps->price << endl;    // 방법 1
    delete ps;    구조체가 사용한 메모리 해제
    return 0;
  }
  ```

  실행 중간에 new 연산자를 이용하여 메모리를 대입받는 것을 알 수 있다.

### 자동 공간, 정적 공간, 동적 공간 추가 설명

* 04.8 포인터, 배열, 포인터연산 단원

**자동 공간**

자동 공간을 사용하는 함수 안에서 정의되는 보통의 변수들을 자동 변수라 한다.

자동 공간은 자동 변수가 자신이 정의되어 있는 함수가 호출되는 순간에 자동으로 생겨나 함수가 종료되는 시점까지 존재하는 것을 뜻한다

```cpp
#include <iostream>
#include <cstring)
using namespace std;
char * getname(void);  // 함수 원형
int main()
{
  char * name;    // 포인터를 만들지만 메모리는 대입하지 않는다

  name = getname();    // 문자열 주소를 name에 대입한다.
  cout << (int *) name << ": " << name << "\n";
  delete [] name;    // 메모리를 해제한다.

  name = getname();  해제한 메모리를 다시 사용한다.
  cout << (int *) name << ": " << name << "\n";
  delete [] name;    // 메모리를 다시 해제한다.
  return 0;
}

char * getname()
{
  char temp[80];    // 임시 배열
  cout << "이름을 입력하십시오: ";
  cin >> temp;
  char *pn = new char[strlen(temp) + 1];
  strcpy(pn, temp);    // 문자열을 더 작은 공간으로 복사한다.

  return pn;    // 함수가 종료될 때 임시 배열인 temp는 소멸한다.
}
```

이 코드에서 임시 배열 temp는 getname() 함수가 작동하는 동안만 존재하고 프로그램 제어가 main()으로 다시 넘어 간다면, temp가 사용하던 메모리는 자동으로 해제된다.

**정적 공간**

정적 공간은 프로그램이 실행되는 동안 지속적으로 존재하는 공간을 말한다.

변수를 정적으로 만드는 것은 두가지다.

1. 함수의 외부에서 변수를 정의

위 코드에서 int main() 이전에 변수를 정의한다면 그 변수는 프로그램이 실행되는 동안 계속 존재한다.

2. 변수를 선언할 때 static이라는 키워드를 붙이는 것

```cpp
static double fee = 56.50;
```

와 같이 static 키워드를 붙이면 해제되지 않고 지속적으로 존재하게 된다.

**동적 공간**

new와 delete 연산자는 자유 공간(동적 공간)이라고 부르는 메모리 풀을 관리한다.

풀은 자동 변수와 정적 변수가 사용하는 메모리와 분리되어 있다.

```cpp
#include <iostream>
#include <cstring)
using namespace std;
char * getname(void);  // 함수 원형
int main()
{
  char * name;    // 포인터를 만들지만 메모리는 대입하지 않는다

  name = getname();    // 문자열 주소를 name에 대입한다.
  cout << (int *) name << ": " << name << "\n";
  delete [] name;    // 메모리를 해제한다.

  name = getname();  해제한 메모리를 다시 사용한다.
  cout << (int *) name << ": " << name << "\n";
  delete [] name;    // 메모리를 다시 해제한다.
  return 0;
}

char * getname()
{
  char temp[80];    // 임시 배열
  cout << "이름을 입력하십시오: ";
  cin >> temp;
  char *pn = new char[strlen(temp) + 1];
  strcpy(pn, temp);    // 문자열을 더 작은 공간으로 복사한다.

  return pn;    // 함수가 종료될 때 임시 배열인 temp는 소멸한다.
}
```

new와 delete 연산자는 어떤 함수에서 메모리를 대입하고 다른 함수에서 그것을 해제할 수 있도록 해준다.

때문에 데이터 수명은 프로그램의 수명이나 함수의 수명에 얽매이지 않는다.

// 메모리에 대한 제어권을 행사할 수 있는 공간을 말하는 듯.

