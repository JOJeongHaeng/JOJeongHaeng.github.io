## 제네릭 프로그래밍의 보충

**간단한 정의** : 타입에 관계없이 동작하는 "일반적인" 코드를 작성하는 방법

Ex) 여러가지 덧셈을 수행하는 함수를 작성할 때 add(int,int) / add(double,double) / add(Point,Point) 이것들을 한 번의 코드 작성으로 가능하게 하는 방법

**제네릭 프로그래밍의 구현 방법** : 매크로 사용(주의가 필요함), 함수/클래스 템플릿 사용

* 매크로를 사용한 제네릭 프로그래밍

  매크로(\#define) : 코드의 단순 대체(복붙)

  ```cpp
  #define PI 3.14259

  int main()
  {
    double a = PI * 2;
    double b = PI * 4;
  }
  ```

  위 코드를 실행하면 전처리기가 PI를 3.14159가 대체하게 전처리를 한다.

  ```cpp
  #include <iostream>
  
  int max(int a, int b)
  {
    return (a > b) ? a : b;
  }

  int main()
  {
    int x = 100;
    int y = 200;

    std::cout << max(x,y);
  }
  ```

  위 코드에서 max함수는 int형 데이터 밖에 처리를 하지 못한다. 다른 데이터형을 사용하려면 위에서 배운 오버 로딩할 수도 있지만, 매크로를 사용할 수 있다.

  ```cpp
  #include <iostream>

  #define MAX(a,b) ((a>b)?a:b)
  
  int main()
  {
    int x = 100;
    int y = 200;

    std::cout << max(x,y); // 전처리기를 통해 ((x>y)?x:y)와 같이 대체된다.

    double z = 1.234;
    double w = 3.456;

    std::cout << max(z,w); // 전처리기를 통해 ((z>w)?z:w)와 같이 대체된다.
  }
  ```

* 매크로를 사용할 때의 유의사항

  코드가 단순 대체됨에 유의해야 한다. 매크로문을 괄호로 감싸는 것이 안전하다.

  ```cpp
  #define SQUARE(a) a*a
  result = SQUARE(5);  //25
  result = 5*5;  //25

  result = 100/SQUARE(5); // 4가 나오기를 기대하지만
  result = 100/5*5;  // 100이 나온다.
  ```

  매크로를 활용한 Generic Programming은 매크로를 활용하여 코드를 대체하는 것이기 때문에 주의가 필요하다.

* C++ 템플릿

  > "설계도 개념"
  
  > 함수 템플릿과 클래스 템플릿 구현을 지원

  > 어떤 데이터 타입이든 컴파일러가 적절한 함수/클래스를 설계도를 기반으로 생성함(C++의 경우 컴파일러가 생성하지만, 다른 언어는 런타임에 생성할 수 있음)
  
  > 템플릿을 이용해 생성하는 제너릭 프로그래밍 / 컴파일 동시에 생성하는 메타 프로그래밍


* 템플릿을 사용한 max 함수의 구현

  1. 타입명을 T로 대체
 
  2. T가 템플릿 인수라는 것을 명시
 
  ```cpp
  #include <iostream>
  
  template <typename T>  // or template <Class T>
                         // 무조건 T를 써야하는 것은 아니지만
                         // 많은 개발자들이 T를 우선적으로 사용
  T max(t a, T b)
  {
    return (a>b) ? a : b;
  }

  int main()
  {
    int a = 10;
    int b = 20;
    std::cout << max<int>(a,b);  // <\>에 타입 이름을 넣어줌
  }
  ```

  꺽세에다가 타입만 넣어주면 컴파일러가 타입에 맞는 함수를 설계도를 이용해 만들어준다.

  템플릿 코드만 존재할 때는 아무 함수도 생성되지 않는다.

  변수형을 생략 가능하기도 하다.

* 템플릿이 사용 가능한 경우

  클래스의 경우 필요한 연산자가 오버로딩이 되어있어야 템플릿 max함수 사용 가능하다.
  (max함수의 경우 \> 연산자의 정의가 되어있어야 함)
